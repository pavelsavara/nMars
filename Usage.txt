  nMars.exe
---------------------
- nMars console has similar interface to pMars
- it could export swithes to project, which can be loaded by IDE
- console default components could be configured thru nMars.exe.config or by -nP, -nE switches
- it's able to dump warriors in various formats

Usage: nMars.exe [options] file1 [files ..]

General:
  -@  file  load options from text file (pMars compatible)
  -@l file  load project from xml file
  -@s file  save project to xml file, (use .nmproj extension)
  -nP name  Change parser component
  -nE name  Change engine component
  -v        Component versions

Rules:
  -r #      Rounds to play [1]
  -s #      Size of core [8000]
  -c #      Cycles until tie [80000]
  -p #      Max. processes [8000]
  -l #      Max. warrior length [100]
  -d #      Min. warriors distance
  -S #      Size of P-space [500]
  -f #      Fixed position series

Dumps:
  -b        Brief/silent parser mode
  -bh       No header
  -bl       No logo
  -bs       No status
  -br       No match results
  -ue .ext  Dump warriors to files with extension
  -uo       Dump format with offset [off]
  -ul       Dump format with labels [off]
  -uc       Dump format with comments [off]
  -ux       Dump format xml

Debugger:
  -e        Interactive debugger mode
  
Examples:
To use it as parser only:
  nMars.exe -r 0 aeka.red -bl -bh
  
Fixed position of second warrior:
  nMars.exe aeka.red flashpaper.red -f 4321
  
Interactive:
  nMars.exe -b -e aeka.red flashpaper.red


  nMars.IDE.exe
---------------------
- IDE is able to manage warriors in projects ans solutions
  - project is set of settings similar to console switches
    - it contains warriors
    - rules
    - praser and engine options
    - breakpoints
  - solution is set of projects
    - it is setup of components which are used to run projects
    - it contains projects
    - it contains components setting  
  - IDE default components could be configured thru nMars.IDE.exe.config
- IDE has simple editor of warriors and rules
- IDE integrates parser and it's showing parser errors on it's console
- IDE has engine/debugger
  - has three types of debug watches
     - graph - planar view of memory
     - list - linear view of memory
     - warriors/tasks - warrior stats and task queue
  - watches has colour semantics for each memory cell
     - outer frame is colour of warrior lt.red, lt.green, lt.blue and lt.yellow
     - inner frame is colour of instruction
        - MOV - grey
        - DAT - black
        - SPL - blue
        - math - violet
        - jumps - green
     - inner white dot for DAT instructions other than 0,0
     - there are event flashes for
        - read - aquamarine
        - write - orange
        - exec - seagreen
        - died - cyan
  - there is tooltip with plenty information about cell
  - click will focus cell in listing watch
  - future: double click will edit cell
  - UI and engine are asynchronous, engine could change speed
- There is console/shell which could execute textual commands
- Shell could be extended by nMarsShellPy module with IronPython
