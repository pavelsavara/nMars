! This grammar is part of nMars - Corewars MARS for .NET 
! Whole solution including it's license could be found at
! http://sourceforge.net/projects/nmars/
! 2006 Pavel Savara

"Name"     = 'RedCode'
"Author"   = 'Pavel Savara'
"Version"  = '0.1'
"About"    = 'CoreWars RedCode'

"Start Symbol" = <Start>

! ------------------------------------------------- Sets

{WS}           = {Whitespace} - {CR} - {LF}
{LabelHead}    = {Letter} + [_]
{LabelTail}    = {Alphanumeric} + [_]

! ------------------------------------------------- Terminals

Whitespace    = {WS}+
NewLine       = {CR}{LF} | {CR} | {LF}

Label         = {LabelHead}{LabelTail}*[:]*
Integer       = {Number}+
Comment Line  =  ';'

! ------------------------------------------------- Rules

<eol> ::= <eolSingle>
        | <eol> <eolSingle>

<eolSingle> ::= NewLine
              | Comment Line

<eolOptional> ::= <eol>
                | !Empty

<Start>   ::= <eolOptional> <AllStatements> <EndOptional>

<EndOptional> ::= <eol>
                | <eol> End <eolOptional>
                | <eol> End <Expression> <eolOptional>
                | <eol> <Labels> End <eolOptional>
                | <eol> <Labels> End <Expression> <eolOptional>
                | <eol> <Labels> <eol> End <eolOptional>
                | <eol> <Labels> <eol> End <Expression> <eolOptional>
                | !Empty

<AllStatements> ::= <Statement>
                  | <For>
                  | <AllStatements> <eol> <Statement>
                  | <AllStatements> <eol> <For>

<For> ::= <LabelsOptional> for <Expression> <eol> <AllStatementsOptional> rof <ExpressionOptional>
        | <Labels> <eol> for <Expression> <eol> <AllStatementsOptional> rof <ExpressionOptional>


<AllStatementsOptional> ::= <AllStatements> <eol>
                            | !Empty

<Statement> ::= <Pin>
              | <Org>
              | <Equ>
              | <LabelsOptional> <Operation>
              | <Labels> <eol> <Operation>
              | <Assert>

<Pin> ::= Pin <Expression>
<Assert> ::= '@assert' <Expression>
<Org> ::= Org <Expression>
<Equ> ::= <Labels> Equ <ModeOptional> <Expression>
        | <Labels> <eol> Equ <ModeOptional> <Expression>

<LabelsOptional> ::= <Labels>
                   | !Empty

<Label> ::= Label
          | <Modifier> ! because labels could be same tokens as modifiers
          | Label '&' Label
          | Label '&' <Modifier>
          | <Modifier> '&' Label

<Labels> ::= <Label>
           | <Labels> <eol> <Label>
           | <Labels> <Label>

<Operation> ::= <Operation0>
              | <Operation1>
              | <Operation2>

<Operation0> ::= <Operator0> 
               | <Operator0> <Parameter> ',' <Parameter>
               | <Operator0> '.' <Modifier> <Parameter> ',' <Parameter>
               | <Operator0> <Parameter>
               | <Operator0> '.' <Modifier> <Parameter>
               | <Operator0> '.' <Modifier>


<Operation1> ::= <Operator1> <Parameter>
               | <Operator1> '.' <Modifier> <Parameter>
               | <Operator1> <Parameter> ',' <Parameter>
               | <Operator1> '.' <Modifier> <Parameter> ',' <Parameter>


<Operation2> ::= <Operator2> <Parameter> ',' <Parameter>
               | <Operator2> '.' <Modifier> <Parameter> ',' <Parameter>

<Parameter>   ::= <Expression>
                | <Mode> <Expression>

<ModeOptional> ::= <Mode>
                 | !Empty

<Mode> ::= '#' | '$' | '@' | '<' | '>' | '{' | '}' | '*'

<Operator0> ::= Nop 
<Operator1> ::= Jmp | Spl | Dat 
<Operator2> ::= Mov | Add | Sub | Mul | Div | Mod
              | Jmz | Jmn | Djn | Slt | Sne | Ldp | Stp
              | Cmp | Seq 

<Modifier> ::= I | A | B | AB | BA | F | X 

<ExpressionOptional> ::= <Expression>
                       | !Empty

<Expression>  ::= <Or Exp> '?' <Expression> ':' <Expression>
                | <Or Exp>

<Or Exp>      ::= <Or Exp> '||' <And Exp>
                | <And Exp>

<And Exp>     ::= <And Exp> '&&' <BinOr Exp>
                | <BinOr Exp>

<BinOr Exp>   ::= <BinOr Exp> '|' <BinXor Exp>
                |  <BinXor Exp>

<BinXor Exp>  ::= <BinXor Exp> '^' <BinAnd Exp>
                | <BinAnd Exp>

<BinAnd Exp>  ::= <BinAnd Exp> '&&&' <Equate Exp> ! This is extension
                | <Equate Exp>

<Equate Exp>  ::= <Equate Exp> '==' <Compare Exp>
                | <Equate Exp> '!=' <Compare Exp>
                | <Equate Exp> '<>' <Compare Exp>
                | <Compare Exp>

<Compare Exp> ::= <Compare Exp> '<'  <Shift Exp>
                | <Compare Exp> '>'  <Shift Exp>
                | <Compare Exp> '<=' <Shift Exp>
                | <Compare Exp> '>=' <Shift Exp>
                | <Shift Exp>

<Shift Exp>   ::= <Shift Exp> '<<' <Add Exp>
                | <Shift Exp> '>>' <Add Exp>
                | <Add Exp>

<Add Exp>     ::= <Add Exp> '+' <Mult Exp>
                | <Add Exp> '-' <Mult Exp>
                | <Mult Exp> 

<Mult Exp>    ::= <Mult Exp> '*' <Negate Exp>
                | <Mult Exp> '/' <Negate Exp>
                | <Mult Exp> '%' <Negate Exp>
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Value>
                | '+' <Value>
                | <Value>

<Value>       ::= Integer
                | <Label>
                | '(' <Expression> ')'
